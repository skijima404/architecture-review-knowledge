id,title,description,context
rf-010,Misaligned with architecture principles,## Description\nアーキテクチャ原則（例：モジュール性、拡張性、標準化など）と整合しない設計・実装が行われ、構造的な一貫性が失われた。\n\n## Context\n- チームやベンダーごとに判断軸が異なり、**全体アーキテクチャの統制が取れなくなる**  \n- 原則が存在していても、設計判断時に無視または誤解されることで、**プロジェクトの一貫性や将来の変更容易性が損なわれる**\n\n## Severity\nTBD,
rf-004,Design-induced operational risk,## Description\n運用時のミスや障害が、運用担当者のスキル不足ではなく、設計時に運用性が考慮されていなかったことに起因する。\n\n## Context\n標準外構成による知見不足、運用手順の自動化・再現性の欠如、観測性の不足、同期設計の脆弱性などが典型。設計段階で運用チームとの連携がなされていれば回避できた事例が多い。\n\n## Severity\nTBD,
rf-005,Security incident,## Description\n想定外のセキュリティ脆弱性が本番運用中に露呈し、インシデントとなる。\n\n## Context\n特に、セキュリティパッチの適用やライブラリのアップグレードが困難な構成の場合、既知の脆弱性に対する対応が後手になりやすい。アップグレード作業に際して影響範囲の特定やテストが困難な場合、セキュリティとメンテナンス性の両面で構造的リスクとなる。\n\n## Severity\nTBD,
rf-011,Misaligned with architecture vision,## Description\nアーキテクチャビジョンと整合しない構成や実装が行われ、意図された将来像と異なる構造が形成された。\n\n## Context\n- ビジョンが明文化されていない／設計に落とし込まれていない場合に多く、**チーム間での認識齟齬や、局所最適な設計**が発生しやすい  \n- 結果として、**システム全体の方向性が曖昧になり、部分的な改善が全体最適に結びつかない**\n\n## Severity\nTBD,
rf-001,Repeated delays,## Description\n移行計画の実行が何度も遅延し、原因の特定やリスケも後手に回っている。\n\n## Context\n複数の技術的・組織的課題が統合的に未解決のまま移行フェーズに到達している状況で発生。\n\n## Severity\nTBD,
rf-008,Unable to accommodate business needs / low responsiveness,## Description\n機能追加や変更要求に対する柔軟性が乏しく、開発や構成の硬直性が露呈する。\n\n## Context\n- 拡張を想定していない設計、モジュール分離の不十分さ、密結合な構成により、小さな変更にも広範な影響が生じる  \n- スパゲッティコード化した実装により、影響範囲の特定や改修の難易度が高くなり、**開発スピードと応答性の低下を招く**  \n- アップグレード容易性の考慮漏れ\n\n## Severity\nTBD,
rf-009,Business Outcome Was Not Achieved,## Description\n開発されたシステムが期待されたビジネス成果（例：業務効率の向上、収益の増加、顧客満足度の改善など）を達成できなかった。\n\n## Context\n- プロジェクト完了後にROIやKPIの未達が明らかとなり、システム導入の妥当性や設計意図が再検討される状況に至る  \n- 技術的には完成していても、ビジネス部門の期待値や施策との整合が取れておらず、投資対効果を発揮できなかった,
rf-006,DR switchover failure,## Description\n災害復旧環境への切替に失敗し、事業継続性が損なわれるケース。\n\n## Context\n- そもそもDR（Disaster Recovery）戦略がソリューション全体として設計されていなかった  \n- アーキテクチャに切替支援機構（フェイルオーバー機構、レプリケーション、DNS切替など）が備わっていなかった  \n- 切替手順が定義されていても、定期的なDR切替テストを行っておらず、実運用での信頼性が確保されていなかった  \n- 特にクラウドやハイブリッド構成では、ネットワーク構成や認証の問題で切替が想定通り動作しないケースも多い\n\n## Severity\nTBD,
rf-012,Numerous bugs occurred,## Description\nテスト環境や方針、コード品質などの複合的な問題により、単体・統合テストで大量の不具合が検出される。\n\n## Context\n- 結果として、**スケジュールの遅延や信頼性の低下、品質保証の工数膨張**が発生する\n\n## Severity\nTBD,
rf-002,Production data contamination,## Description\nリリース後に新旧システム間の不整合やバグにより、誤ったデータが本番環境に書き込まれ、システムの信頼性が低下する。\n\n## Context\n特にストラングラーパターンなど段階移行時に、ダークローンチや並行稼働設計が不十分で、差分確認や整合性チェックが行われなかった結果として発生。データの突き合わせや検証が省略されたことにより、テストが通っていても構造的な不整合が混入する。\n\n## Severity\nTBD,
rf-003,Capacity shortage,## Description\n本番稼働直後に各種リソースのキャパシティが不足し、応答性能の劣化やバッチ処理の遅延など、期待される品質を満たせない状態に陥る。\n\n## Context\nリソースには CPU、メモリ、DB同時接続数、HTTP同時接続数、アプリケーションスレッド数、ネットワーク帯域、中継装置（例：API Gateway、ロードバランサ、SSLセッションキャッシュ）などが含まれる。  \nキャパシティ計画の甘さや想定外のトラフィック集中により、ボトルネックが構造的に顕在化する。  \n特に見落とされやすいのが、下流システムや外部連携先との接続数制限である。APIGWを通過していても、その先のDB・外部API・バッチシステムなどの連携点でボトルネックが発生するケースが多い。\n\n## Severity\nTBD,
rf-007,Extended time required for troubleshooting,## Description\n障害時に原因特定・復旧までに時間がかかる。\n\n## Context\n- モニタリングや構成の可視性が不足しており、インシデントの影響範囲や根本原因にたどり着けない  \n- ログやトレース情報が不十分、または手動取得が必要な構成になっている  \n- Observability設計（モニタリング、メトリクス、分散トレーシングなど）が考慮されておらず、**トラブルシューティングにかかる負荷が高くなる**  \n- アーキテクチャやコード構造が局所的・複雑であり、障害箇所の特定が難航する  \n- ドキュメントや運用手順書の未整備も原因のひとつとなり、障害時の初動に時間を要する\n\n## Severity\nTBD,
