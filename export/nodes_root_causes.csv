"id","title","type","description","context","impact","preventive_measures","introduced_in_phase","reviewable_in_phase","tags"
"rc-017","Insufficient capacity planning for the target architecture","root_cause","新システム側での必要な性能要件（リクエスト数、スループット、同時接続など）に対する容量見積もりが不十分。","特に、ピーク時のトラフィックやバッチ処理、外部接続数などを軽視すると性能劣化・ダウンタイムの原因となる。  
また、同時接続数や処理スループットなどのキャパシティ要件が、サブシステム・サービス・コンポーネント単位でバラバラに検討されており、全体として整合性の取れた性能設計がなされていない、あるいは明示的な定義自体が存在しないことが多い。","システム稼働後に処理能力が不足し、レスポンスの遅延や障害、ユーザー体験の劣化を招くリスクが高まる。","TBD","D","D","root_cause"
"rc-023","Not a standard configuration; lacking operational knowledge","root_cause","一般的な運用知見やサポートのある構成ではなく、特殊な構成や独自実装が多いため、対応やトラブルシューティングが困難。","特殊な構成によりドキュメントや既存知見が適用できず、知識が属人化しやすい。  
その結果、**人に依存したオペレーション**や、トラブル時の手詰まりを招く。","運用の安定性が確保できず、障害発生時の対応遅延や復旧不能のリスクが高まる。","TBD","E","E","root_cause"
"rc-033","Vision was never defined","root_cause","ビジョンが定義されておらず、システムやアーキテクチャの設計方針に一貫性が欠けている。","経営層やビジネス部門との間で中長期的な方向性が合意されておらず、プロジェクト開始時点での設計判断がブレやすくなる。  
また、要件定義やレビューの際に「何が正解か」が判断できない状態に陥りやすい。","実装された成果物がビジネスニーズに適合せず、度重なる修正や認識齟齬によるプロジェクト遅延・コスト超過を招く。","TBD","A","A","root_cause"
"rc-007","Structural design inhibits testability","root_cause","アプリケーションのコード構造（クラス設計・依存関係・ライブラリ選定など）が、テスト容易性に対して配慮されていない。","継承の多用、状態の持ち方の複雑さ、グローバル状態の依存などにより、ユニットテストの構成が難しく、実行コストが高くなりがちである。  
また、ビルド時間の長さや依存ライブラリの初期化負荷、抽象化・インターフェース設計の不足により、モック化やスタブ化が困難となり、テスト作業が後回しにされやすい。","テストが十分に実施されず、バグの早期検出や回帰検証が困難になり、品質の低下や手戻りの発生につながる。","TBD","C","D","root_cause"
"rc-027","Data verification method not defined","root_cause","移行・結合・本番反映におけるデータ整合性の検証方法（例：差分チェック、クロスチェック、期待値定義など）が設計段階で明確に定義されていない。","特に本番データを扱う場合、チェック方法が「目視」や「なんとなく動いている」などに頼りがちで、形式的な検証基準が存在しないまま設計・実装が進むことが多い。","不整合やデータ破壊の兆候を早期に発見できず、汚染状態でシステムが稼働してしまうリスクが高まり、信頼性・正確性を損なう。","TBD","G","G","root_cause"
"rc-013","Baseline Architecture understanding was insufficient","root_cause","既存システムの構造や制約についての理解が不十分なままアーキテクチャ設計が進められ、依存関係や制約の見落としが発生する。","特に、暗黙的な結合や処理順序の前提を見逃すことで、実装・移行フェーズで深刻な手戻りが生じる。  
また、「刷新だから新しいものだけを見ればよい」という意識の下で、旧システムの構造的制約・業務的依存・データフローを調査せずに設計が進められることが多い。","トランジションアーキテクチャが非現実的な絵空事となり、カットオーバー不能・段階移行の失敗に繋がる。","TBD","D","D","root_cause"
"rc-003","Unclear responsibility boundaries among DevOps, infrastructure, and application operations","root_cause","DevOps、インフラ、アプリ運用の責任範囲が不明確なため、設計・構成・運用の連携が破綻しやすくなる。","例えば「誰が何をモニタリングすべきか」「どこまでがコードとして管理されるか」といった認識が曖昧で、各チームがサイロ化して作業している場合が多い。","連携の不備により障害対応や改善活動において属人化・手戻りが発生しやすく、**設計方針の不整合や運用上の抜け漏れ**が多発する。","TBD","G","G","root_cause"
"rc-037","Insufficient alignment through the implementation phase","root_cause","The implementation process failed to consistently align with architectural objectives and models. Decisions made during development were not validated against the architectural vision, leading to design drift.","This often occurs in agile or parallel delivery contexts where architectural guidance is insufficiently embedded in team workflows. Lack of governance, absent architecture representatives, or fragmented responsibilities can contribute to the misalignment.","Architectural drift results in systems that violate intended structure, cross-cutting concerns, or design principles. This may lead to operational inefficiencies, increased integration complexity, or a loss of long-term maintainability.","- Establish architectural alignment checkpoints throughout the implementation phase.
- Assign architectural ownership at team level (e.g., feature team architect).
- Incorporate architecture review criteria into definition of done.
- Use architectural traceability techniques to surface divergence early.","G","G","root_cause"
"rc-026","Dark launch mechanism was not implemented","root_cause","本番環境に影響を与えずに新旧システムの比較・検証を行うための「ダークローンチ」機構が設計に含まれていない。","並行稼働・トラフィックミラーリング・結果比較などの仕組みが不在なことで、重大な不整合やバグを事前に検出できず、本番障害に直結するリスクが高まる。  
特にStrangler Pattern等の段階移行において、機能切替の安全性評価が主観や経験則に依存しやすくなる。","移行時に十分な検証ができず、切替後に予期しない障害や不整合が顕在化し、サービス中断やユーザー影響につながる。","TBD","G","G","root_cause"
"rc-012","External system dependencies not captured in baseline architecture","root_cause","現行システムが他の社内外システムとどのように連携しているか（API連携、バッチ処理、ファイル転送、DBLink等）がベースラインアーキテクチャで明示されておらず、全体構造の前提が欠落している。","特に暗黙的なデータフローやスケジュールベースの同期処理など、可視化されていない依存関係が把握されていないケースが多く、設計段階での見落としが発生しやすい。","新アーキテクチャ設計において既存の連携が見落とされ、結合点の欠落・移行時の障害・再設計の発生につながる。","TBD","D","D","root_cause"
"rc-002","Upgradeability not considered","root_cause","システムやコンポーネントのアップグレードパスが設計段階で十分に考慮されておらず、ライブラリ更新・セキュリティパッチ適用・バージョン互換性の維持が困難。","特に依存関係の複雑さ、密結合な構成、テスト自動化の不足といった開発・設計上の習慣が、アップグレード設計の優先度を下げてしまっているケースが多い。","技術的負債が蓄積し、**既知の脆弱性への対応が遅延**または**放置**される状態を招きやすくなる。","TBD","E;G","E;G","root_cause"
"rc-036","Not referenced during detailed implementation design","root_cause","Design assets such as architecture principles, target models, or key decisions were not actively referenced during the detailed implementation design phase. This resulted in local decisions diverging from architectural intent.","This typically occurs when documentation is not integrated into the delivery team's workflows, or when design reviews focus only on technical feasibility rather than alignment. Time pressure or unclear ownership of architecture documents can exacerbate the problem.","Local implementation deviates from the intended architecture, leading to misalignment with architectural principles and vision. This may manifest as inconsistent patterns, duplicated logic, or violations of cross-cutting concerns.","- Require design reviews to explicitly verify alignment with architecture documents.
- Include architectural checkpoints in implementation phase gates.
- Automate reference checks using traceability tooling or doc linking.
- Assign responsibility for architecture consistency to a lead engineer or architect embedded in the implementation team.","G","G","root_cause"
"rc-016","Extensibility not considered","root_cause","将来の要件追加や仕様変更を前提とした設計（拡張性）が考慮されておらず、変更に強い構造になっていない。","特に初期リリースの最小要件にだけフォーカスした構成で、ドメイン設計やモジュラー性、変更局所性といった観点が欠落したまま実装されるケースが多い。","追加開発のたびに大規模改修やテストが必要となり、コストやリードタイムが増大する。","TBD","C;F;G","D;F;G","root_cause"
"rc-022","No-go criteria are undefined","root_cause","カットオーバー・本番リリースの「中止判断基準」が設計段階で定義されていない。","暗黙の合意や「なんとなく大丈夫そう」という主観的な判断に依存し、明確なストッパーが存在しないケースが多い。  
また、判断基準が曖昧なまま承認プロセスが属人化し、ExecutiveレベルでのGo判断が出ずにリリースが延期され続ける場合もある。","重大な障害を招いたり、逆にリリースが進まずビジネス機会を失うなど、意思決定の不在がリスクとなる。","TBD","G","G","root_cause"
"rc-032","Business misalignment of the vision","root_cause","ビジネス部門とアーキテクチャ設計者の間でビジョンの認識が食い違い、実装が期待された価値に結びつかない。","多くの場合、アーキテクト側がビジネスビジョンを正しく理解していない、または設計に反映していない。  
また、ビジョン自体が曖昧なまま設計が進められるケースもある。","実装されたシステムがビジネスの期待に沿わず、再設計や修正のコストが発生し、信頼性や効率性が損なわれる。","TBD","A","A","root_cause"
"rc-006","Unrealistic transition architecture","root_cause","現行システムから新システムへの移行を担うアーキテクチャ（トランジションアーキテクチャ）が、実行可能性や既存環境の制約を考慮せず設計されている。","ベースラインアーキテクチャに対する理解不足（例：コードがスパゲッティ状態で依存関係が複雑）があり、前提に大きな誤認があるままトランジションアーキテクチャが定義されている。  
さらに、ソリューション構成や製品導入時の実装段階（ステージング、段階導入）に対する理解が不足しており、必要な段階移行や回避策が設計から漏れている。","切替手順が現実的でなく、カットオーバー不能・移行計画の破綻を招く。","TBD","F","F","root_cause"
"rc-029","Cross-boundary security considerations were lacking","root_cause","各コンポーネントやサービス単体ではセキュリティ対策がなされているものの、システム全体にまたがる連携の中での脅威への対策が設計されていない。","全体連携・プロキシ・認証連携・データフロー全体を通じたセキュリティ設計が不在である。  
特にID・認証情報の伝播、通信経路の暗号化、境界越えアクセス権限など、連携箇所での抜けや重複が生じやすく、そこにセキュリティホールが発生する。","外部からの侵入ではなく、正規経路を通じた権限逸脱や意図しない情報漏洩が発生するリスクが高まる。","TBD","E","E","root_cause"
"rc-039","Not included in design","root_cause","Key architectural elements—such as principles, target models, or transition strategies—were not included in the design documentation or artifacts. As a result, downstream teams proceeded without incorporating essential architectural direction.","This issue commonly arises when architectural knowledge is siloed or shared informally. Documentation practices may be immature, or design activities may happen under tight deadlines without architectural oversight.","Exclusion of important architecture content in design leads to inconsistency and divergence from the intended architecture. Teams may unknowingly make decisions that contradict the architecture vision or violate core principles.","- Include architectural components as required sections in design templates.
- Institute mandatory architecture design reviews that verify inclusion of key elements.
- Maintain centralized architecture documentation with version control and team visibility.
- Encourage collaborative design sessions that explicitly reference architecture artifacts.","D","D","root_cause"
"rc-019","Insufficient DR testing","root_cause","DR切替やバックアップ復元に関するテストが実施されていない、または頻度・網羅性が不足している。","設計上は想定通りに動作するはずだった構成であっても、実際の本番切替時に手順や挙動が検証されておらず、未確認のまま本番を迎えてしまうケースが多い。  
特に、災害時の復旧対応に関する想定演習や定期的な切替テストが組織的に定着していないことが背景にある。","設計上は問題ない構成でも、実際には切替や復旧がうまくいかず、障害時に業務継続が不可能となるリスクが高まる。","TBD","G","G","root_cause"
"rc-009","Test architecture not considered","root_cause","テスト環境や戦略、CI/CDとの統合といった「テストアーキテクチャ」が初期設計に含まれていない。","設計段階でテスト容易性が考慮されず、本番環境と異なる前提でテストされていたり、テスト環境の再現性が確保されていない。  
また、CIパイプラインやステージング環境との連携設計も欠如しており、テストが後付けの対応となっている。","検出されない不具合や、移行後の環境での想定外動作が発生しやすく、移行リスクや品質リスクが増大する。","TBD","D","D","root_cause"
"rc-018","Insufficient DR design","root_cause","災害対策（Disaster Recovery）の設計が不十分であり、現実的な切替手順やバックアップ設計、フェイルオーバー機構が備わっていない。","DRシナリオが形骸化し、実際の障害発生時に対応できるかどうかの検証が十分に行われていない。  
また、業務継続性やRTO/RPOといった要件が明確に定義されていないまま設計が進められているケースが多い。","災害時に業務継続性を維持できない可能性が高まり、重大な損失や信頼低下につながる。","TBD","B","D","root_cause"
"rc-008","Interface contract not defined or insufficient","root_cause","APIやコンポーネント間のインターフェース仕様（例：OpenAPI、gRPCのprotoファイル、イベントスキーマなど）が文書化・共有されておらず、契約不整合やテスト困難といった問題が発生しやすい。","OpenAPIなどのAPI仕様定義が欠落していることで、自動テスト生成・クライアント生成・モック作成の仕組みが構築できない。  
実装チーム間で期待する入出力がズレ、エンドツーエンドテストで初めて不整合に気づくような非効率が発生する。  
また、設計レビューや契約チェックが曖昧になり、品質のばらつきや属人化を助長する。  
本来 Contract-First アプローチが求められる場面でも、OpenAPI などの形式的な仕様定義が存在せず、表形式のパラメータ一覧などにとどまっているケースが多く見られる。","インターフェース定義の曖昧さにより、開発・テスト・結合工程での混乱を招き、設計ミスや障害、再実装などの手戻りにつながる。","TBD","G","G","root_cause"
"rc-028","Integration assumptions were inconsistent across subsystems","root_cause","アーキテクチャ設計段階で定義された全体構成図（箱ダイアグラム）は存在するものの、実装フェーズにおいて各サブシステム間で前提や制約が共有されず、実装の整合性が取れていない。","協力会社やチームごとに別々にプロジェクトが進行し、**プロトコル・フォーマット・処理順序・性能要件などの設計前提がズレる**。  
また、キャパシティ設計が一貫しておらず、**全体の性能が最小構成に引きずられる／非対称なボトルネックが生まれる**などの問題が発生する。","本番環境で初めて動作のズレや性能劣化が判明し、調整・再設計に多大な工数が発生する。","TBD","G","G","root_cause"
"rc-038","NFRs were not defined","root_cause","Non-functional requirements (NFRs) such as performance, availability, operability, or scalability were not explicitly defined or documented. As a result, architectural decisions lacked clear targets and constraints to guide trade-offs.","This issue often arises when architectural scoping focuses heavily on functionality while neglecting qualities critical to long-term system viability. Stakeholders may assume implicit expectations, leading to misalignment in design intent.","Without defined NFRs, implementation teams make assumptions or defer decisions, increasing the likelihood of misalignment with architecture principles and vision. This can result in later rework, performance issues, or operational fragility.","- Require NFRs to be captured during the early architecture definition phase.
- Include NFR coverage in architecture review checklists.
- Make NFRs traceable to design decisions and testable through reviewable criteria.
- Involve operational stakeholders early to identify non-functional expectations.","D","D","root_cause"
"rc-025","Security considerations were lacking","root_cause","セキュリティ要件や脅威モデルに基づいた設計が行われておらず、脆弱性や漏洩リスクが設計段階から組み込まれてしまう。","アクセス制御の欠落、暗号化設計の不備、APIの誤った公開などが例として挙げられる。  
セキュリティ要件の策定や設計が専門家不在のまま、「現行踏襲」「他システムと同様」といった安易な慣例に依存して進められることが多く、本来必要な脅威分析や攻撃ベクトル評価が行われていない。","リリース後に重大なセキュリティ脆弱性が発覚し、情報漏洩やサービス停止、信頼失墜などにつながるリスクが高まる。","TBD","B;F;G","B;F;G","root_cause"
"rc-040","Overloaded or Contradictory Architecture Vision","root_cause","The architecture vision attempted to encompass too many conflicting goals or concerns simultaneously. As a result, it became vague, unfocused, and difficult to apply in design and trade-off decisions.","This issue arises when stakeholders contribute divergent expectations into the vision without prioritization. The resulting vision may include goals that are mutually exclusive or overly aspirational without a delivery strategy.","Architects and designers are left without clear guidance on what to prioritize. Trade-off decisions become arbitrary or contradictory, leading to misalignment between implementation and intended outcomes.","- Facilitate early vision refinement sessions with clear prioritization of concerns.
- Use architecture decision records (ADRs) to document trade-offs and exclusions.
- Align the vision with concrete, measurable goals.
- Establish governance to evolve the vision iteratively based on feasibility assessments.","A","A","root_cause"
"rc-011","Baseline architecture capacity not analyzed","root_cause","現行システムのアーキテクチャにおける処理能力・リソース使用状況が十分に分析されておらず、新アーキテクチャ設計時に必要な性能要件が漏れている。","現在のアクセス負荷・スループット・バッチ処理時間・ピークトラフィックの傾向などの定量的な分析が行われておらず、新システム側に適切な性能前提を伝達できない。  
また、アプリケーションとデータベースの結合構造（例：DBLink、ストアド依存、分散処理境界）などが見落とされ、隠れたボトルネックや単一障害点が設計から排除されない。","移行後のシステムで想定外のスローダウンや性能劣化、瞬間的な過負荷による障害が発生する可能性が高まる。","TBD","D","D","root_cause"
"rc-001","Architecture misaligned with modern concerns","root_cause","アーキテクチャがモダンな開発・運用スタイル（自動化・可観測性・セキュリティ・クラウドネイティブ設計など）と乖離しており、構造的に現代の開発チームやエンジニア文化に適応できていない。","「運用が属人化している」「CI/CD に対応していない」「監視やトレーシングの設計がない」「手動操作が前提」など、従来のウォーターフォール型運用文化がそのまま残っていることが多い。","結果として、技術的負債が蓄積するだけでなく、**優秀な人材の採用や維持が困難となり、組織の持続性に影響を与える**","TBD","C;G","D;G","root_cause"
"rc-035","Integration testing strategy was not defined","root_cause","サブシステム間や外部連携を含む統合テストに関する戦略・設計・責任範囲が明確に定義されていない。","各開発チームが単体テストに集中し、統合観点のテスト設計・実施・検証がプロジェクト全体として設計から漏れている。  
特に、責任の所在が曖昧なため、プロトコルやフォーマット、連携タイミングの整合性が確認されず、結合時に初めて問題が顕在化する。","想定されていた相互動作が実現されず、後工程での手戻りや障害が多発する。","TBD","F","F","root_cause"
"rc-015","Component-level test strategy was insufficient","root_cause","コンポーネント単位でのテスト方針や対象範囲が明確でなく、責務や境界の定義に基づいた検証が困難。","コンポーネントの粒度・責務分担が設計段階で曖昧なままであり、ユニットテストやモジュールテストにおけるスコープの整理が不十分となることが多い。  
また、各チームでテストの観点やカバレッジの基準が統一されていないケースが見られる。","障害発生時に原因切り分けができない、開発中に不具合の混入が多発するなど、品質低下と手戻りの増加を招く。","TBD","G","G","root_cause"
"rc-021","Test layering strategy not defined","root_cause","テストピラミッドやテスト階層（ユニット・統合・E2Eなど）の役割分担とカバレッジ方針が整理されておらず、テスト構造が非効率な形で組まれている。","UIテストやE2Eテストに依存しすぎる傾向があり、実行時間の長期化・テストの不安定化・バグ検出の遅延を招きやすい。  
また、ユニットやコンポーネントレベルでのテストの整備が後回しとなり、回帰検証や自動化の負荷が高くなる。  
テスト設計が属人化しており、開発者間でのテスト対象や責任範囲の認識齟齬が生じやすい。","テストの信頼性が低下し、不具合の早期発見や継続的デリバリーの実現が難しくなる。","TBD","D","D","root_cause"
"rc-031","Integration testing strategy was not defined","root_cause","サブシステム間や外部連携を含む統合テストに関する戦略・設計・責任範囲が明確に定義されていない。","各開発チームが単体テストに集中し、統合観点のテスト設計・実施・検証がプロジェクト全体として設計から漏れている。  
特に、プロトコル、データ形式、タイミングなどの整合性が事前に確認されておらず、サブシステム単位での品質保証にとどまってしまうケースが多い。","想定されていた相互動作が実現されず、後工程での手戻りや障害が多発する。","TBD","F","F","root_cause"
"rc-005","Lack of early test scaffolding","root_cause","開発初期にテスト容易性を高めるためのスキャフォールド（モック・フェイク・テスト用データ等）が整備されておらず、テスト設計や実装が後回しになる。","特にモジュール分離やインターフェース抽象化が不十分な場合、テストツールの導入やテスト環境の構築も後手に回りやすくなる。","十分なテストが実施できず、**品質保証が不完全なまま次工程に進んでしまう**ことで、後工程でのバグ混入や改修コスト増加につながる。","TBD","G","G","root_cause"
"rc-014","Codebase too entangled for safe cutover","root_cause","既存コードベースの結合度が高く、機能分割や段階的な移行（Strangler Pattern 等）が困難な状態にある。","モジュール間の依存関係が明示されておらず、スパゲッティ化した構造のまま長期間運用されてきたことで、機能ごとの切り出しが難しくなっている。  
また、ユニットテストやCI環境も整備されておらず、コード修正の影響範囲が読みづらいため、移行作業時に「一部だけ」の切り出しが現実的でなくなっている。","結果として、大規模な一括カットオーバーを強いられ、開発やテストの負荷が跳ね上がる。バグ混入や開発遅延が多発し、リファクタや段階移行によるリスク軽減が実現できず、移行・開発計画全体の破綻を招く。","TBD","G","G","root_cause"
"rc-020","Insufficient testability strategy","root_cause","テスト容易性を意識した設計やアーキテクチャ戦略が初期段階から不在である。","設計時にテスト観点での分離や検証容易性を考慮しておらず、責務の分割・データ依存排除・モック可能な構造などが欠落しているケースが多い。  
また、テストのしやすさに関する非機能要件が明示されず、チーム全体での共通理解も不足している。","開発後期でのテスト計画が破綻し、バグ検出・修正・再検証のサイクルが長期化し、納期遅延や品質低下につながる。","TBD","D","D","root_cause"
"rc-030","DR continuity was not designed across systems","root_cause","各サブシステム・サービス単位ではDR構成が検討されているが、システム全体として一貫性あるフェイルオーバーや切替戦略が設計されていない。","一部のシステムだけが切り替わっても、全体としてアプリケーションが動作しない、依存系が死ぬといった現象が発生する。  
特にメッセージング基盤、バッチ連携、データ一貫性などが切替後に整合しないケースが多い。","部分的なDR対応が機能しても、システム全体の復旧が実現できず、業務停止やデータ不整合のリスクが高まる。","TBD","B;F","D;F","root_cause"
"rc-004","Insufficient PoC for feasibility","root_cause","技術的実現可能性を検証するPoCが十分に実施されておらず、アーキテクチャ決定の信頼性が低い状態。","採用予定のミドルウェアやサードパーティ製品、アーキテクチャ特性について、**性能、スケーラビリティ、可用性、拡張性、監視や運用手順の容易さ**などの観点での検証がなされていない。  
また、**コストやライセンス制約、クラウド対応可否、障害対応のシナリオ**といった現実的な制約条件が見落とされているケースも含まれる。","結果として、**実装・運用フェーズで「想定と違う」「運用に耐えない」などの問題が顕在化し、設計や選定のやり直しに繋がるリスクが高まる**","TBD","E","E","root_cause"
"rc-024","Operational architecture was not considered","root_cause","モニタリング、アラート設計、運用フロー、障害対応手順といった「運用アーキテクチャ」の検討が不足している。","分散トレーシングやAPM（Application Performance Monitoring）などの観測基盤が設計段階で考慮されておらず、障害原因の特定や性能分析が困難になる。  
また、モニタリング・容量監視の不足により、キャパシティ超過や性能劣化の予兆が検知できず、リソース逼迫による障害が発生しやすくなる。","障害対応が後手に回り、オペレーションの安定性が確保されない。  
障害発生時のログ収集・ボトルネック特定に時間を要し、復旧や原因究明が遅延する。","TBD","D","D","root_cause"
"rc-041","Data migration approach was not defined","root_cause","The project lacked a clearly defined data migration approach, particularly one that accounted for risks associated with migrating production data. This omission resulted in fragile or ad hoc handling of sensitive or critical datasets.","Data migration is often considered late in the project or treated as a purely technical task. In many cases, it is executed without test coverage, dry runs, or rollback planning. This is exacerbated when the architecture does not allocate resources or process to migration planning.  
This risk increases especially when adopting a new architectural style or platform, where unfamiliar failure modes may emerge. In such cases, contingency techniques like dark launches or canary releases may be necessary to observe production behavior safely.","Without a defined and validated approach, data migration may lead to inconsistencies, loss, or corruption of production data. These issues typically surface during go-live and result in severe operational impact.","- Define the data migration strategy during the architecture design phase (Phase C).
- Conduct dry-run migrations using representative test data and staging environments.
- Incorporate data rollback plans and validation mechanisms.
- Include migration scenarios in test plans and architectural risk assessments.
- Consider techniques such as dark launches or canary releases when adopting new architectures, to safely validate data and system behavior in production.","G","G","root_cause"
"rc-010","Test-enabling technology or environment not planned","root_cause","テストの実施に必要な技術的手段や実行環境が設計段階で検討されていない。","テストフレームワークの選定、テスト用サービスの仮想化、シナリオ実行ツールの導入、ステージング環境やCI統合環境の整備などが後回しになる。  
特に外部連携・非同期処理・バッチなど通常とは異なる形態のテストに対する準備が漏れやすい。","結局手動テストや縮小試験に頼らざるを得なくなり、検証スコープの縮小・自動化の断念・品質保証コストの増大を招く。","TBD","G","G","root_cause"
"rc-034","Unrealistic target architecture","root_cause","目指すべき最終アーキテクチャ（Target Architecture）が、実現可能性や業務・組織制約を無視して構想されており、現場にとって実行不能な理想論となっている。","技術的には不整合、パフォーマンス上実現困難、または既存システム・運用との互換性が確保されていない構成が採用されているケースが多い。  
また、関係者間の認識齟齬や要件の曖昧さにより、理想論としての構想だけが先行してしまい、実装可能性や移行戦略が置き去りにされる。","アーキテクチャレビューやPoCで破綻が明らかになり、設計のやり直し・導入遅延・信頼性低下につながる。","TBD","D","D","root_cause"
